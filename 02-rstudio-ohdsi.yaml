# Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with the License. 
# A copy of the License is located at
#    http://aws.amazon.com/apache2.0/
# or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
# either express or implied. See the License for the specific language governing permissions and limitations under the License.


AWSTemplateFormatVersion: '2010-09-09'
Description: Deploys de OHDSI RStudio Instance

Parameters:
#  VpcId:
#    Type: AWS::EC2::VPC::Id
#    Description: VPC this server will reside in
  VPCSubnet:
    Description: The subnet in which you want your R-Studio server to be deployed.
    Type: AWS::EC2::Subnet::Id
  VPCId:
    Type: AWS::EC2::VPC::Id
  RStudioSecurityGroup:
    Description: The Security Group you want to use to contorl access to your R-Studio Server.
    Type: AWS::EC2::SecurityGroup::Id
  HomeDirectorySize:
    Description: The amount of encrypted disk space, in GBs, allocated to store R-Studio user's local data.
    Type: Number
    Default: 20
  InstanceType:
    Type: String
    Description: Instance type for the R-Studio server.
    AllowedValues:
      - t2.medium 
      - t2.large 
      - t2.xlarge 
      - t2.2xlarge 
      - t3.medium 
      - t3.large 
      - t3.xlarge 
      - t3.2xlarge 
      - m4.large 
      - m4.xlarge 
      - m4.2xlarge 
      - m4.4xlarge 
      - m4.10xlarge 
      - m4.16xlarge 
      - m5.large 
      - m5.xlarge 
      - m5.2xlarge 
      - m5.4xlarge 
      - m5.12xlarge 
      - m5.24xlarge 
      - c4.large 
      - c4.xlarge 
      - c4.2xlarge 
      - c4.4xlarge 
      - c4.8xlarge 
      - c5.large 
      - c5.xlarge 
      - c5.2xlarge 
      - c5.4xlarge 
      - c5.9xlarge 
      - c5.18xlarge
      - r4.large 
      - r4.xlarge 
      - r4.2xlarge 
      - r4.4xlarge 
      - r4.8xlarge 
      - r4.16xlarge
      - r5.large 
      - r5.xlarge 
      - r5.2xlarge 
      - r5.4xlarge 
      - r5.8xlarge 
      - r5.16xlarge 
      - g2.2xlarge
      - g2.8xlarge
      - p2.xlarge
      - p2.8xlarge
      - p2.16xlarge
      - g3.4xlarge
      - g3.8xlarge
      - g3.16xlarge
    ConstraintDescription: Valid instance type in the t2, t3, m5, c5, r4, g2, p2, and g3 families
    Default: t2.xlarge
  UserList:
    Description: Provide a comma separated list of usernames and passwords (user1,pass1,user2,pass2) to create on the R-Studio Server.
    Type: 'String'
    NoEcho: true
    Default: 'rstudio,yourRSTUDIOpassword1'
  KeyPair:
    Description: The EC2 Key Pair to use for the Atlas/WebAPI EC2 Instances.
    Type: AWS::EC2::KeyPair::KeyName
  RStudioInstanceProfile:
    Type: String
  SageMakerBucket:
    Description: Name of the S3 bucket you want to use to hold the PatientLevelPrediction training data and model output for SageMaker.  If you leave this blank a bucket will be generated for you.
    Type: 'String'
    AllowedPattern: ^([a-zA-Z0-9`~#$%^&*()_+,\\-])*$
  RDSEndpoint: 
    Type: String
  RedshiftEndpoint: 
    Type: String
  EBEndpoint:
    Description: "The unique name to use for your Elastic Beanstalk URL (will be rendered http://(EBEndpoint).(region).elasticbeanstalk.com)"
    Type: String
  DatabaseMasterPassword:
    Description: Must be letters (upper or lower), numbers, spaces, and these special characters `~#$%^&*()_+,-
    Type: String
    NoEcho: true
    AllowedPattern: ^([a-zA-Z0-9`~#$%^&*()_+,\\-])*$
    ConstraintDescription: The Amazon RDS master password. Letters, numbers, spaces, and these special characters `~#$%^&*()_+,-
  Sources:
    Description: Comma-delimited list of OMOP CDM schema sources to load into the Redshift datawarehouse
    Type: String
    AllowedPattern: ^([a-zA-Z0-9,])*$
    Default: CMSDESynPUF1k,CMSDESynPUF23m
  PatientLevelPredictionv:
    Description: OHDSI PatientLevelPrediction GitHub branch you want deployed (this specifies the version)
    Type: String
    Default: 'v2.0.2'
  CohortMethodv:
    Description: OHDSI CohortMethod GitHub branch you want deployed (this specifies the version)
    Type: String
    Default: 'v2.6.2'
  SqlRenderv:
    Description: OHDSI SqlRender GitHub branch you want deployed (this specifies the version)
    Type: String
    Default: 'v1.4.10'
  DatabaseConnectorv:
    Description: OHDSI DatabaseConnector GitHub branch you want deployed (this specifies the version)
    Type: String
    Default: 'v2.1.0'
  DatabaseConnectorJarsv:
    Description: OHDSI DatabaseConnectorJars GitHub branch you want deployed (this specifies the version)
    Type: String
    Default: 'v1.0.0'
  OhdsiRToolsv:
    Description: OhdsiRTools GitHub branch you want deployed (this specifies the version)
    Type: String
    Default: 'v1.5.3'
  FeatureExtractionv:
    Description: OHDSI FeatureExtraction GitHub branch you want deployed (this specifies the version)
    Type: String
    Default: 'v2.0.2'
  Cyclopsv:
    Description: OHDSI Cyclops GitHub branch you want deployed (this specifies the version)
    Type: String
    Default: 'v1.3.1'
  EmpiricalCalibrationv:
    Description: OHDSI EmpiricalCalibration GitHub branch you want deployed (this specifies the version)
    Type: String
    Default: 'v1.3.6'
  OhdsiSharingv:
    Description: OHDSI OhdsiSharing GitHub branch you want deployed (this specifies the version)
    Type: String
    Default: 'v0.1.3'
  Achillesv:
    Description: OHDSI Achilles GitHub branch you want deployed (this specifies the version)
    Type: String
    Default: 'v1.5.0'
  MethodEvaluationv:
    Description: OHDSI MethodEvalution GitHub branch you want deployed (this specifies the version)
    Type: String
    Default: 'v1.0.1'
  Hydrav:
    Description: OHDSI Hydra GitHub branch you want deployed (this specifies the version)
    Type: String
    Default: 'v0.0.4'
  PredictionComparisonv:
    Description: OHDSI Hydra GitHub branch you want deployed (this specifies the version)
    Type: String
    Default: 'v1.0.0'

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-467ca739
    us-east-2:
      AMI: ami-976152f2
    us-west-1:
      AMI: ami-46e1f226
    us-west-2:
      AMI: ami-6b8cef13
    ca-central-1:
      AMI: ami-2f39bf4b
    eu-west-1:
      AMI: ami-9cbe9be5
    eu-west-2:
      AMI: ami-c12dcda6
    eu-west-3:
      AMI: ami-cae150b7
    eu-central-1:
      AMI: ami-1b316af0
    sa-east-1:
      AMI: ami-f09dcc9c
    ap-south-1:
      AMI: ami-b46f48db
    ap-southeast-1:
      AMI: ami-64260718
    ap-southeast-2:
      AMI: ami-60a26a02
    ap-northeast-1:
      AMI: ami-28ddc154
    ap-northeast-2:
      AMI: ami-efaf0181
  Tags:
    architectureId:
      Value: OHDSI
    architectureLayer:
      Value: Atlas/WebAPI
    project: 
      Value: OHDSI
    environment:
      Value: POC
    schedule:
      Value: LZ-ISCH-Schedules-WD0818CET

Resources:

  SageMakerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - sagemaker.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns: 
        - "arn:aws:iam::aws:policy/AmazonSageMakerFullAccess"


  RStudioInstance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
              /tmp/rdependencies.r:
                content: !Sub |
                  print("Testing to see if R dependency libraries are installed...")
                  if("callr" %in% rownames(installed.packages()) == FALSE){install.packages("callr", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if("cli" %in% rownames(installed.packages()) == FALSE){install.packages("cli", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if("digest" %in% rownames(installed.packages()) == FALSE){install.packages("digest", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if("git2r" %in% rownames(installed.packages()) == FALSE){install.packages("git2r", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if("httr" %in% rownames(installed.packages()) == FALSE){install.packages("httr", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if("jsonlite" %in% rownames(installed.packages()) == FALSE){install.packages("jsonlite", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if("memoise" %in% rownames(installed.packages()) == FALSE){install.packages("memoise", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if("pkgbuild" %in% rownames(installed.packages()) == FALSE){install.packages("pkgbuild", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if("pkgload" %in% rownames(installed.packages()) == FALSE){install.packages("pkgload", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if("rcmdcheck" %in% rownames(installed.packages()) == FALSE){install.packages("rcmdcheck", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if("remotes" %in% rownames(installed.packages()) == FALSE){install.packages("remotes", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if("rstudioapi" %in% rownames(installed.packages()) == FALSE){install.packages("rstudioapi", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if("sessioninfo" %in% rownames(installed.packages()) == FALSE){install.packages("sessioninfo", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if("usethis" %in% rownames(installed.packages()) == FALSE){install.packages("usethis", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if("withr" %in% rownames(installed.packages()) == FALSE){install.packages("withr", repos = "http://cran.us.r-project.org", upgrade = "never")}

                  if(packageVersion("devtools") != "2.0.2"){install.packages("https://cran.r-project.org/src/contrib/Archive/devtools/devtools_2.0.2.tar.gz", repos=NULL, type="source")}

                  if(packageVersion("aws.signature") != "0.5.0"){devtools::install_version("aws.signature", version = "0.5.0", repos = "http://cloudyr.github.io/drat", upgrade = "never")}             
                  if(packageVersion("aws.ec2metadata") != "0.1.6"){devtools::install_version("aws.ec2metadata", version = "0.1.6", repos = "http://cloudyr.github.io/drat", upgrade = "never")}             
                  if(packageVersion("aws.s3") != "0.3.20"){devtools::install_version("aws.s3", version = "0.3.20", repos = "http://cloudyr.github.io/drat", upgrade = "never")}                     
                  if(packageVersion("acepack") != "1.4.1"){devtools::install_version("acepack", version = "1.4.1", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("askpass") != "1.1"){devtools::install_version("askpass", version = "1.1", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("assertthat") != "0.2.1"){devtools::install_version("assertthat", version = "0.2.1", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("AUC") != "0.3.0"){devtools::install_version("AUC", version = "0.3.0", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("aws.ec2metadata") != "0.1.6"){devtools::install_version("aws.ec2metadata", version = "0.1.6", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("aws.s3") != "0.3.20"){devtools::install_version("aws.s3", version = "0.3.20", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("aws.signature") != "0.5.0"){devtools::install_version("aws.signature", version = "0.5.0", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("backports") != "1.1.4"){devtools::install_version("backports", version = "1.1.4", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("base64enc") != "0.1-3"){devtools::install_version("base64enc", version = "0.1-3", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("BH") != "1.69.0-1"){devtools::install_version("BH", version = "1.69.0-1", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("bit") != "1.1-14"){devtools::install_version("bit", version = "1.1-14", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("bitops") != "1.0-6"){devtools::install_version("bitops", version = "1.0-6", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("caTools") != "1.17.1.2"){devtools::install_version("caTools", version = "1.17.1.2", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("checkmate") != "1.9.3"){devtools::install_version("checkmate", version = "1.9.3", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("clipr") != "0.6.0"){devtools::install_version("clipr", version = "0.6.0", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("clisymbols") != "1.2.0"){devtools::install_version("clisymbols", version = "1.2.0", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("colorspace") != "1.4-1"){devtools::install_version("colorspace", version = "1.4-1", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("config") != "0.3"){devtools::install_version("config", version = "0.3", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("crayon") != "1.3.4"){devtools::install_version("crayon", version = "1.3.4", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("crosstalk") != "1.0.0"){devtools::install_version("crosstalk", version = "1.0.0", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("curl") != "3.3"){devtools::install_version("curl", version = "3.3", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("data.table") != "1.12.2"){devtools::install_version("data.table", version = "1.12.2", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("DBI") != "1.0.0"){devtools::install_version("DBI", version = "1.0.0", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("desc") != "1.2.0"){devtools::install_version("desc", version = "1.2.0", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("devtools") != "2.0.2"){devtools::install_version("devtools", version = "2.0.2", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("diagram") != "1.6.4"){devtools::install_version("diagram", version = "1.6.4", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("doParallel") != "1.0.14"){devtools::install_version("doParallel", version = "1.0.14", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("dplyr") != "0.8.1"){devtools::install_version("dplyr", version = "0.8.1", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("DT") != "0.7"){devtools::install_version("DT", version = "0.7", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("evaluate") != "0.14"){devtools::install_version("evaluate", version = "0.14", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("fansi") != "0.4.0"){devtools::install_version("fansi", version = "0.4.0", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("fastmatch") != "1.1-0"){devtools::install_version("fastmatch", version = "1.1-0", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("ff") != "2.2-14"){devtools::install_version("ff", version = "2.2-14", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("ffbase") != "0.12.7"){devtools::install_version("ffbase", version = "0.12.7", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("foreach") != "1.4.4"){devtools::install_version("foreach", version = "1.4.4", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("formatR") != "1.7"){devtools::install_version("formatR", version = "1.7", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("Formula") != "1.2-3"){devtools::install_version("Formula", version = "1.2-3", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("fs") != "1.3.1"){devtools::install_version("fs", version = "1.3.1", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("functional") != "0.6"){devtools::install_version("functional", version = "0.6", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("gdtools") != "0.1.9"){devtools::install_version("gdtools", version = "0.1.9", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("generics") != "0.0.2"){devtools::install_version("generics", version = "0.0.2", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("ggplot2") != "3.2.0"){devtools::install_version("ggplot2", version = "3.2.0", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("gh") != "1.0.1"){devtools::install_version("gh", version = "1.0.1", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("glue") != "1.3.1"){devtools::install_version("glue", version = "1.3.1", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("gridExtra") != "2.3"){devtools::install_version("gridExtra", version = "2.3", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("gtable") != "0.3.0"){devtools::install_version("gtable", version = "0.3.0", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("hexbin") != "1.27.3"){devtools::install_version("hexbin", version = "1.27.3", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("highr") != "0.8"){devtools::install_version("highr", version = "0.8", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("Hmisc") != "4.2-0"){devtools::install_version("Hmisc", version = "4.2-0", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("htmlTable") != "1.13.1"){devtools::install_version("htmlTable", version = "1.13.1", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("htmltools") != "0.3.6"){devtools::install_version("htmltools", version = "0.3.6", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("htmlwidgets") != "1.3"){devtools::install_version("htmlwidgets", version = "1.3", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("httpuv") != "1.5.0"){devtools::install_version("httpuv", version = "1.5.0", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("ini") != "0.3.1"){devtools::install_version("ini", version = "0.3.1", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("iterators") != "1.0.10"){devtools::install_version("iterators", version = "1.0.10", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("itertools") != "0.1-3"){devtools::install_version("itertools", version = "0.1-3", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("keras") != "2.2.4.1"){devtools::install_version("keras", version = "2.2.4.1", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("knitr") != "1.23"){devtools::install_version("knitr", version = "1.23", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("labeling") != "0.3"){devtools::install_version("labeling", version = "0.3", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("later") != "0.8.0"){devtools::install_version("later", version = "0.8.0", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("latticeExtra") != "0.6-28"){devtools::install_version("latticeExtra", version = "0.6-28", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("lazyeval") != "0.2.2"){devtools::install_version("lazyeval", version = "0.2.2", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("magrittr") != "1.5"){devtools::install_version("magrittr", version = "1.5", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("mailR") != "0.4.1"){devtools::install_version("mailR", version = "0.4.1", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("markdown") != "1"){devtools::install_version("markdown", version = "1", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("mime") != "0.7"){devtools::install_version("mime", version = "0.7", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("munsell") != "0.5.0"){devtools::install_version("munsell", version = "0.5.0", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("officer") != "0.3.5"){devtools::install_version("officer", version = "0.3.5", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("openssl") != "1.4"){devtools::install_version("openssl", version = "1.4", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("openxlsx") != "4.1.0.1"){devtools::install_version("openxlsx", version = "4.1.0.1", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("pack") != "0.1-1"){devtools::install_version("pack", version = "0.1-1", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("ParallelLogger") != "1.1.0"){devtools::install_version("ParallelLogger", version = "1.1.0", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("pillar") != "1.4.1"){devtools::install_version("pillar", version = "1.4.1", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("pkgconfig") != "2.0.2"){devtools::install_version("pkgconfig", version = "2.0.2", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("plogr") != "0.2.0"){devtools::install_version("plogr", version = "0.2.0", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("plotly") != "4.9.0"){devtools::install_version("plotly", version = "4.9.0", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("plyr") != "1.8.4"){devtools::install_version("plyr", version = "1.8.4", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("png") != "0.1-7"){devtools::install_version("png", version = "0.1-7", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("prettyunits") != "1.0.2"){devtools::install_version("prettyunits", version = "1.0.2", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("pROC") != "1.15.0"){devtools::install_version("pROC", version = "1.15.0", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("processx") != "3.3.1"){devtools::install_version("processx", version = "3.3.1", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("promises") != "1.0.1"){devtools::install_version("promises", version = "1.0.1", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("PRROC") != "1.3.1"){devtools::install_version("PRROC", version = "1.3.1", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("ps") != "1.3.0"){devtools::install_version("ps", version = "1.3.0", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("purrr") != "0.3.2"){devtools::install_version("purrr", version = "0.3.2", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("PythonInR") != "0.1-4"){devtools::install_version("PythonInR", version = "0.1-4", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("R.methodsS3") != "1.7.1"){devtools::install_version("R.methodsS3", version = "1.7.1", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("R.oo") != "1.22.0"){devtools::install_version("R.oo", version = "1.22.0", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("R.utils") != "2.9.0"){devtools::install_version("R.utils", version = "2.9.0", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("R6") != "2.4.0"){devtools::install_version("R6", version = "2.4.0", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("RColorBrewer") != "1.1-2"){devtools::install_version("RColorBrewer", version = "1.1-2", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("Rcpp") != "1.0.1"){devtools::install_version("Rcpp", version = "1.0.1", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("RcppEigen") != "0.3.3.5.0"){devtools::install_version("RcppEigen", version = "0.3.3.5.0", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("RCurl") != "1.95-4.12"){devtools::install_version("RCurl", version = "1.95-4.12", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("ReporteRs") != "0.8.10"){devtools::install_version("ReporteRs", version = "0.8.10", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("ReporteRsjars") != "0.0.4"){devtools::install_version("ReporteRsjars", version = "0.0.4", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("reshape2") != "1.4.3"){devtools::install_version("reshape2", version = "1.4.3", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("reticulate") != "1.12"){devtools::install_version("reticulate", version = "1.12", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("rJava") != "0.9-11"){devtools::install_version("rJava", version = "0.9-11", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("rjson") != "0.2.20"){devtools::install_version("rjson", version = "0.2.20", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("RJSONIO") != "1.3-1.2"){devtools::install_version("RJSONIO", version = "1.3-1.2", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("rlang") != "0.4.0"){devtools::install_version("rlang", version = "0.4.0", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("rmarkdown") != "1.13"){devtools::install_version("rmarkdown", version = "1.13", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("rprojroot") != "1.3-2"){devtools::install_version("rprojroot", version = "1.3-2", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("rvg") != "0.2.1"){devtools::install_version("rvg", version = "0.2.1", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("scales") != "1.0.0"){devtools::install_version("scales", version = "1.0.0", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("shape") != "1.4.4"){devtools::install_version("shape", version = "1.4.4", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("shiny") != "1.3.2"){devtools::install_version("shiny", version = "1.3.2", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("shinycssloaders") != "0.2.0"){devtools::install_version("shinycssloaders", version = "0.2.0", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("shinydashboard") != "0.7.1"){devtools::install_version("shinydashboard", version = "0.7.1", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("slam") != "0.1-45"){devtools::install_version("slam", version = "0.1-45", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("snow") != "0.4-3"){devtools::install_version("snow", version = "0.4-3", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("sourcetools") != "0.1.7"){devtools::install_version("sourcetools", version = "0.1.7", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("stringi") != "1.4.3"){devtools::install_version("stringi", version = "1.4.3", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("stringr") != "1.4.0"){devtools::install_version("stringr", version = "1.4.0", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("survAUC") != "1.0-5"){devtools::install_version("survAUC", version = "1.0-5", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("sys") != "3.2"){devtools::install_version("sys", version = "3.2", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("tensorflow") != "1.13.1"){devtools::install_version("tensorflow", version = "1.13.1", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("tfruns") != "1.4"){devtools::install_version("tfruns", version = "1.4", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("tibble") != "2.1.3"){devtools::install_version("tibble", version = "2.1.3", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("tidyr") != "0.8.3"){devtools::install_version("tidyr", version = "0.8.3", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("tidyselect") != "0.2.5"){devtools::install_version("tidyselect", version = "0.2.5", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("tinytex") != "0.14"){devtools::install_version("tinytex", version = "0.14", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("triebeard") != "0.3.0"){devtools::install_version("triebeard", version = "0.3.0", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("urltools") != "1.7.3"){devtools::install_version("urltools", version = "1.7.3", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("utf8") != "1.1.4"){devtools::install_version("utf8", version = "1.1.4", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("uuid") != "0.1-2"){devtools::install_version("uuid", version = "0.1-2", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("vctrs") != "0.1.0"){devtools::install_version("vctrs", version = "0.1.0", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("viridis") != "0.5.1"){devtools::install_version("viridis", version = "0.5.1", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("viridisLite") != "0.3.0"){devtools::install_version("viridisLite", version = "0.3.0", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("whisker") != "0.3-2"){devtools::install_version("whisker", version = "0.3-2", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("xfun") != "0.8"){devtools::install_version("xfun", version = "0.8", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("xgboost") != "0.6.4.1"){devtools::install_version("xgboost", version = "0.6.4.1", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("XML") != "3.98-1.20"){devtools::install_version("XML", version = "3.98-1.20", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("xml2") != "1.2.0"){devtools::install_version("xml2", version = "1.2.0", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("xopen") != "1.0.0"){devtools::install_version("xopen", version = "1.0.0", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("xtable") != "1.8-4"){devtools::install_version("xtable", version = "1.8-4", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("yaml") != "2.2.0"){devtools::install_version("yaml", version = "2.2.0", repos = "http://cran.us.r-project.org", upgrade = "never")}
                  if(packageVersion("zeallot") != "0.1.0"){devtools::install_version("zeallot", version = "0.1.0", repos = "http://cran.us.r-project.org", upgrade = "never")}             
                mode: 000664
                owner: root
                group: root  
    Properties:
      IamInstanceProfile: !Ref RStudioInstanceProfile
      InstanceType: !Ref InstanceType
      KeyName: !Ref 'KeyPair'
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      SecurityGroupIds: 
        - !Ref RStudioSecurityGroup
      SubnetId: !Ref VPCSubnet 
      Tags:
        - Key: "Name"
          Value: "RStudio"
      BlockDeviceMappings: 
          - DeviceName: "/dev/xvda"
            Ebs: 
              VolumeType: "gp2"
              DeleteOnTermination: "true"
              VolumeSize: 50
          - DeviceName: "/dev/sdm"
            Ebs: 
              VolumeType: "gp2"
              DeleteOnTermination: "true"
              Encrypted: "true"
              VolumeSize: !Ref HomeDirectorySize
      UserData:
        Fn::Base64: !Sub 
          - | 
            #!/bin/bash
            RSTUDIO_URL="https://download2.rstudio.org/server/centos6/x86_64/rstudio-server-rhel-1.2.1335-x86_64.rpm"
            SHINY_URL="https://download3.rstudio.org/centos6.3/x86_64/shiny-server-1.5.9.923-x86_64.rpm"
            RSTUDIOPORT=8787
            users=${UserList}
            SMBUCKET=${SageMakerBucket}
            SMROLEARN=${SageMakerRole}
            MIN_USER_ID=400 
            export SOURCES=${Sources}

            # Install SSM client
            yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
            restart amazon-ssm-agent
            
            #Use cfn-init to grab and apply the files specified in the above UserData
            /opt/aws/bin/cfn-init --verbose --stack ${AWS::StackName} --resource RStudioInstance --region ${AWS::Region}

            aws s3 ls $SMBUCKET
            if [ $? != 0 ] || [ "$SMBUCKET" == "" ]; then
              SMBUCKET=${AutoSMBucket}
              aws s3 mb s3://$SMBUCKET
            fi

            sudo mkfs -t ext4 /dev/sdm
            mkdir /mnt/tmp
            sudo mount /dev/sdm /mnt/tmp
            cp -a /home/. /mnt/tmp
            umount /dev/sdm
            mount /dev/sdm /home
            echo "/dev/sdm /home ext4 defaults,nofail 0 2" >> /etc/fstab

            yum erase -y java-1.7.0-openjdk java-1.7.0-openjdk-devel
            yum install -y java-1.8.0-openjdk java-1.8.0-openjdk-devel

            export MAKE='make -j 8'
            sudo yum install -y xorg-x11-xauth.x86_64 xorg-x11-server-utils.x86_64 xterm libXt libX11-devel libXt-devel libcurl-devel git compat-gmp4 compat-libffi5 openssl-devel
            sudo yum install R R-core R-core-devel R-devel libxml2-devel -y
            if [ -f /usr/lib64/R/etc/Makeconf.rpmnew ]; then
              sudo cp /usr/lib64/R/etc/Makeconf.rpmnew /usr/lib64/R/etc/Makeconf
            fi
            if [ -f /usr/lib64/R/etc/ldpaths.rpmnew ]; then
              sudo cp /usr/lib64/R/etc/ldpaths.rpmnew /usr/lib64/R/etc/ldpaths
            fi

            mkdir /mnt/r-stuff
            cd /mnt/r-stuff

            pushd .
            mkdir R-latest
            cd R-latest
            wget https://cran.r-project.org/src/base/R-3/R-3.5.3.tar.gz
            tar -xzf R-3.5.3.tar.gz
            #Trying out Python
            sudo yum install -y python36 python36-devel python36-pip
            sudo yum install -y gcc gcc-c++ gcc-gfortran
            sudo yum install -y readline-devel cairo-devel libpng-devel libjpeg-devel libtiff-devel postgresql-devel
            cd R-3*
            ./configure --with-readline=yes --enable-R-profiling=no --enable-memory-profiling=no --enable-R-shlib --with-pic --prefix=/usr --with-x --with-libpng --with-jpeglib --with-cairo --enable-R-shlib --with-recommended-packages=yes
            make -j 8
            sudo make install
            sudo su << BASH_SCRIPT
            echo 'export PATH=${!PWD}/bin:$PATH' >> /etc/profile
            BASH_SCRIPT
            popd

            sudo sed -i 's/make/make -j 8/g' /usr/lib64/R/etc/Renviron

            # set unix environment variables
            sudo su << BASH_SCRIPT
            echo '
            export JAVA_HOME=/etc/alternatives/jre
            ' >> /etc/profile
            BASH_SCRIPT
            sudo sh -c "source /etc/profile"

            # fix java binding - R and packages have to be compiled with the same java version as hadoop
            sudo R CMD javareconf


            RSTUDIO_FILE=$(basename $RSTUDIO_URL)
            wget $RSTUDIO_URL
            sudo yum install --nogpgcheck -y $RSTUDIO_FILE
            # change port - 8787 will not work for many companies
            sudo sh -c "echo 'www-port=$RSTUDIOPORT' >> /etc/rstudio/rserver.conf"
            sudo sh -c "echo 'auth-minimum-user-id=$MIN_USER_ID' >> /etc/rstudio/rserver.conf"
            sudo perl -p -i -e "s/= 5../= 100/g" /etc/pam.d/rstudio
            sudo rstudio-server stop || true
            sudo rstudio-server start

            #Grab R binaries   
            cd /usr/lib64/R/library
            wget https://ohdsi-sample-data.s3.amazonaws.com/rdependencies.tar.gz
            tar zxvf rdependencies.tar.gz

            #Install R dependencies if any of the specified versions differ
            sudo Rscript /tmp/rdependencies.r

            SHINY_FILE=$(basename $SHINY_URL)
            wget $SHINY_URL
            sudo yum install --nogpgcheck -y $SHINY_FILE

            #sudo R --no-save <<R_SCRIPT
            #install.packages(c('shiny','rmarkdown'), repos="http://cran.rstudio.com")
            #R_SCRIPT

            sudo yum install -y cairo-devel
            sudo yum install -y python-scipy
            sudo pip install scipy
            sudo pip install sklearn
            sudo pip install torch torchvision
            sudo pip install boto3==1.7.52
            sudo pip install sagemaker
            sudo pip install mxnet
            sudo pip install pandas

            # Set site-wide grDevices 'bitmap' type to 'cairo' to enable the correct generation of PNG images
            sudo echo "options(bitmapType=\"cairo\")
            " > /usr/lib64/R/etc/Rprofile.site

            # Install all of the OHDSI R Libraries
            sudo R --no-save << R_SCRIPT
            library(devtools)
            if(packageVersion("SqlRender") != "${SqlRenderv}"){devtools::install_github("ohdsi/SqlRender", ref = "v${SqlRenderv}", upgrade = "never")}
            if(packageVersion("DatabaseConnector") != "${DatabaseConnectorv}"){devtools::install_github("ohdsi/DatabaseConnector", ref = "v${DatabaseConnectorv}", upgrade = "never")}
            if(packageVersion("DatabaseConnectorJars") != "${DatabaseConnectorJarsv}"){devtools::install_github("ohdsi/DatabaseConnectorJars", ref = "v${DatabaseConnectorJarsv}", upgrade = "never")}
            if(packageVersion("OhdsiRTools") != "${OhdsiRToolsv}"){devtools::install_github("ohdsi/OhdsiRTools", ref = "v${OhdsiRToolsv}", upgrade = "never")}
            if(packageVersion("Achilles") != "${Achillesv}"){devtools::install_github("ohdsi/Achilles", ref = "v${Achillesv}", upgrade = "never")}
            if(packageVersion("FeatureExtraction") != "${FeatureExtractionv}"){devtools::install_github("ohdsi/FeatureExtraction", ref = "v${FeatureExtractionv}", upgrade = "never")}
            if(packageVersion("Cyclops") != "${Cyclopsv}"){devtools::install_github("ohdsi/Cyclops", ref = "v${Cyclopsv}", upgrade = "never")}
            if("BigKnn" %in% rownames(installed.packages()) == FALSE){devtools::install_github("ohdsi/BigKnn", upgrade = "never")}
            if(packageVersion("CohortMethod") != "${CohortMethodv}"){devtools::install_github("ohdsi/CohortMethod", ref = "v${CohortMethodv}", upgrade = "never")}
            if(packageVersion("EmpiricalCalibration") != "${EmpiricalCalibrationv}"){devtools::install_github("ohdsi/EmpiricalCalibration", ref = "v${EmpiricalCalibrationv}", upgrade = "never")}
            if(packageVersion("OhdsiSharing") != "${OhdsiSharingv}"){devtools::install_github("ohdsi/OhdsiSharing", ref = "v${OhdsiSharingv}", upgrade = "never")}
            if(packageVersion("MethodEvaluation") != "${MethodEvaluationv}"){devtools::install_github("ohdsi/MethodEvaluation", ref = "v${MethodEvaluationv}", upgrade = "never")}
            if(packageVersion("Hydra") != "${Hydrav}"){devtools::install_github("ohdsi/Hydra", ref = "v${Hydrav}", upgrade = "never")}
            if(packageVersion("PatientLevelPrediction") != "${PatientLevelPredictionv}"){devtools::install_github("ohdsi/PatientLevelPrediction", ref = "v${PatientLevelPredictionv}", upgrade = "never")}            
            if(packageVersion("PredictionComparison") != "${PredictionComparisonv}"){devtools::install_github("ohdsi/PredictionComparison", ref = "v${PredictionComparisonv}", upgrade = "never")}
            R_SCRIPT

            region=`curl http://169.254.169.254/latest/dynamic/instance-identity/document|grep region|awk -F\" '{print $4}'`
            count=1
            for i in $(echo $users | sed "s/,/ /g")
            do
                if [ `expr $count % 2` -eq "1" ]; then
                  username=$i
                  let count+=1
                  continue
                else
                  sudo adduser $username
                  sudo sh -c "echo '$i' | passwd --stdin $username"
                  sudo -u $username mkdir /home/$username/.aws
                  sudo -u $username bash -c 'echo "[default]
            region = '$region'" > /home/'$username'/.aws/config'

                  sudo -u $username bash -c 'echo "#Connection string for the OMOP database on Redshift
            connectionDetails <- DatabaseConnector::createConnectionDetails(dbms = \"redshift\",
            server = \"${RedshiftEndpoint}/mycdm\",
            user = \"master\",
            password = \"${DatabaseMasterPassword}\")

            #Connection string for the WebAPI database on RDS Aurora PostgreSQL
            connectionDetails <- DatabaseConnector::createConnectionDetails(dbms = \"postgresql\",
            server = \"${RDSEndpoint}/OHDSI?ssl=true&sslfactory=org.postgresql.ssl.NonValidatingFactory\",
            user = \"ohdsi_admin_user\",
            password = \"${DatabaseMasterPassword}\")
                  " > /home/'$username'/ConnectionDetails.R'

                  for i in $(echo $SOURCES | sed "s/,/ /g")
                  do
                    sudo -u $username bash -c 'echo "cdmDatabaseSchema <- \"'$i'\"
            cohortDatabaseSchema <- \"'$i'results\"
                    " >> /home/'$username'/ConnectionDetails.R'
                  done
                  sudo -u $username bash -c 'echo "SageMakerBucket <- \"'$SMBUCKET'\"" >> /home/'$username'/ConnectionDetails.R'
                  sudo -u $username bash -c 'echo "SageMakerRoleARN <- \"'$SMROLEARN'\"" >> /home/'$username'/ConnectionDetails.R'

                  # add the first users in the list to the sudoers file.
                  if [ "$count" = "2" ]; then
                    echo "$username  ALL=(ALL:ALL) ALL" >> /etc/sudoers
                  fi

                  let count+=1
                fi
            done
          - { AutoSMBucket: !Join [ "", [ !Ref "AWS::AccountId", '-', !Select [ 1, !Split [ '-', !Ref 'VPCSubnet'] ], '-sagemakerplp' ] ] }
      Tags:
        - Key: lz:architectureId
          Value: !FindInMap [Tags,architectureId,Value]
        - Key: lz:architectureLayer
          Value: !FindInMap [Tags,architectureLayer,Value]
        - Key: lz:project
          Value: !FindInMap [Tags,project,Value]
        - Key: lz:environment
          Value: !FindInMap [Tags,environment,Value]
        - Key: lz:schedule
          Value: !FindInMap [Tags,schedule,Value]

  RStudioTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: RStudioInstance
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 4
      Matcher:
        HttpCode: '200'
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '20'
      Targets:
      - Id: !Ref 'RStudioInstance'
        Port: 8787
      UnhealthyThresholdCount: 3
      VpcId: !Ref VPCId

  ShinyServerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: RStudioInstance
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 4
      Matcher:
        HttpCode: '200'
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '20'
      Targets:
      - Id: !Ref 'RStudioInstance'
        Port: 3838
      UnhealthyThresholdCount: 3
      VpcId: !Ref VPCId

  
Outputs:
  RStudioTargetGroupArn:
    Value: !Ref RStudioTargetGroup
  ShinyServerTargetGroupArn:
    Value: !Ref ShinyServerTargetGroup    